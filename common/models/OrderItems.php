<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "order_items".
 *
 * @property string $id
 * @property string $order_id
 * @property string $item_id
 * @property string $price
 * @property integer $quantity
 * @property string $note
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 *
 * @property OrderItemAddon[] $orderItemAddons
 * @property Addons[] $addons
 * @property OrderItemChoices[] $orderItemChoices
 * @property ItemChoices[] $itemChoices
 * @property MenuItems $item
 */
class OrderItems extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'order_items';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['order_id', 'item_id', 'price', 'quantity'], 'required'],
            [['order_id', 'item_id', 'quantity'], 'integer'],
            [['price'], 'number'],
            [['note'], 'string'],
            [['created_at', 'updated_at', 'deleted_at'], 'safe'],
            [['item_id'], 'exist', 'skipOnError' => true, 'targetClass' => MenuItems::className(), 'targetAttribute' => ['item_id' => 'id']],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'order_id' => 'Order ID',
            'item_id' => 'Item ID',
            'price' => 'Price',
            'quantity' => 'Quantity',
            'note' => 'Note',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
            'deleted_at' => 'Deleted At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderItemAddons()
    {
        return $this->hasMany(OrderItemAddon::className(), ['order_item_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAddons()
    {
        return $this->hasMany(Addons::className(), ['id' => 'addon_id'])->viaTable('order_item_addon', ['order_item_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrderItemChoices()
    {
        return $this->hasMany(OrderItemChoices::className(), ['order_item_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getItemChoices()
    {
        return $this->hasMany(ItemChoices::className(), ['id' => 'item_choice_id'])->viaTable('order_item_choices', ['order_item_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getItem()
    {
        return $this->hasOne(MenuItems::className(), ['id' => 'item_id']);
    }

    /**
     * @inheritdoc
     * @return OrderItemsQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new OrderItemsQuery(get_called_class());
    }

    public function beforeSave($insert)
    {
        if (!$this->isNewRecord)
            $this->updated_at = date('Y-m-d H:i:s');
        else
            $this->created_at = date('Y-m-d H:i:s');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function fields()
    {
        return [
            'id',
            'price',
            'quantity',
            'note',
            'menu_item' => function() {
                $item = array();
                $item['id'] = $this->item->id;
                $item['name'] = $this->item->name;
                $item['description'] = $this->item->description;
                $item['price'] = $this->item->price;
                $item['status'] = $this->item->status;
                $item['discount'] = $this->item->discount;
                $item['image'] = $this->item->image;
                $item['is_taxable'] = $this->item->is_taxable;
                $item['is_verified'] = $this->item->is_verified;
                $restaurant = Restaurants::checkRestaurantAccess();
                $item['categories'] = MenuItems::getMenuItemCategories($restaurant->id, $this->item->id);
                return $item;
            },
            'addons' => function() {
                return $this->orderItemAddons;
            },
            'item_choices' => function() {
                return $this->orderItemChoices;
            }
        ];
    }
}
