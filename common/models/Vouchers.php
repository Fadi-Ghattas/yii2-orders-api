<?php

namespace common\models;

use Yii;

/**
 * This is the model class for table "vouchers".
 *
 * @property string $id
 * @property string $code
 * @property string $name
 * @property string $value
 * @property string $minimum_order
 * @property string $start_date
 * @property string $expiry_date
 * @property string $created_at
 * @property string $updated_at
 * @property string $deleted_at
 *
 * @property ClientsVouchers[] $clientsVouchers
 * @property Clients[] $clients
 * @property Orders[] $orders
 */
class Vouchers extends \yii\db\ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'vouchers';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['code', 'name', 'value', 'start_date', 'expiry_date'], 'required'],
            [['value', 'minimum_order'], 'number'],
            [['start_date', 'expiry_date', 'created_at', 'updated_at'], 'safe'],
            [['code', 'name'], 'string', 'max' => 255],
            [['code'], 'unique'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'code' => 'Code',
            'name' => 'Name',
            'value' => 'Value',
            'minimum_order' => 'Minimum Order',
            'start_date' => 'Start Date',
            'expiry_date' => 'Expiry Date',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }


    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClientsVouchers()
    {
        return $this->hasMany(ClientsVouchers::className(), ['voucher_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getClients()
    {
        return $this->hasMany(Clients::className(), ['id' => 'client_id'])->viaTable('clients_vouchers', ['voucher_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getOrders()
    {
        return $this->hasMany(Orders::className(), ['voucher_id' => 'id']);
    }

    /**
     * @inheritdoc
     * @return VouchersQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new VouchersQuery(get_called_class());
    }

    public function afterValidate()
    {
        if ($this->hasErrors()) {
            return Helpers::HttpException(422, 'validation failed', ['error' => $this->errors]);
        }
    }

    public function beforeSave($insert)
    {
        if (!$this->isNewRecord)
            $this->updated_at = date('Y-m-d H:i:s');
        else
            $this->created_at = date('Y-m-d H:i:s');

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    public function getClientVoucherFields()
    {
        return [
            'voucher_name' => (string)$this->name,
            'voucher_amount' => (double)$this->value,
            'voucher_code' => (double)$this->code,
        ];
    }

    public function isStart()
    {
        $nowDate = new \DateTime();
        return $nowDate >= new \DateTime($this->start_date);
    }

    public function isExpired()
    {
        $nowDate = new \DateTime();
        return $nowDate > new \DateTime($this->expiry_date);
    }

    public function getStartDate()
    {
        $datetime1 = new \DateTime();
        $interval = $datetime1->diff(new \DateTime($this->start_date));
        $years = $interval->format('%y');
        $months = $interval->format('%m');
        $days = $interval->format('%a');
        $hours = $interval->format('%h');
        $minutes = $interval->format('%i');
        $seconds = $interval->format('%S');
        $elapsedFormat = '';
        if ($years > 0)
            $elapsedFormat .= '%y years ';
        if ($months > 0)
            $elapsedFormat .= '%m months ';
        if ($days > 0)
            $elapsedFormat .= '%a day(s) and ';
        if ($hours > 0)
            $elapsedFormat .= '%h hour(s) ';
        if ($minutes > 0)
            $elapsedFormat .= '%i minute(s) and ';
        if ($seconds > 0)
            $elapsedFormat .= '%S second(s)';
        $elapsed = $interval->format($elapsedFormat);
        return $elapsed;
    }
}
